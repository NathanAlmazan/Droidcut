{"version":3,"file":"static/js/853.e3f2e8bd.chunk.js","mappings":"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","sources":["components/authentication/login/LoginForm.js","pages/Login.js"],"sourcesContent":["import * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport { Icon } from '@iconify/react';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\n// material\nimport {\n  Link,\n  Stack,\n  Checkbox,\n  Typography,\n  TextField,\n  IconButton,\n  InputAdornment,\n  FormControlLabel\n} from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n// ----------------------------------------------------------------------\n\nexport default function LoginForm({ loginUser, loginError }) {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      remember: true\n    },\n    validationSchema: LoginSchema,\n    onSubmit: (value) => {\n      loginUser(value.email, value.password);\n    }\n  });\n\n  const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  const handleShowPassword = () => {\n    setShowPassword((show) => !show);\n  };\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"email\"\n            label=\"Email address\"\n            {...getFieldProps('email')}\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"current-password\"\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            {...getFieldProps('password')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton onClick={handleShowPassword} edge=\"end\">\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            error={Boolean(touched.password && errors.password)}\n            helperText={touched.password && errors.password}\n          />\n          {loginError && (\n            <Typography variant=\"body1\" color=\"error\">Email or password is incorrect.</Typography>\n          )}\n        </Stack>\n\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}>\n          <FormControlLabel\n            control={<Checkbox {...getFieldProps('remember')} checked={values.remember} />}\n            label=\"Remember me\"\n          />\n\n          <Link component={RouterLink} variant=\"subtitle2\" to=\"/resetPassword\">\n            Forgot password?\n          </Link>\n        </Stack>\n\n        <LoadingButton\n          fullWidth\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          loading={isSubmitting}\n        >\n          Login\n        </LoadingButton>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import React from 'react';\nimport { useFirebaseApp } from '../contexts/FirebaseProvider';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { styled } from '@mui/material/styles';\nimport { Stack, Link, Container, Typography } from '@mui/material';\n// layouts\nimport AuthLayout from '../layouts/AuthLayout';\n// components\nimport Page from '../components/Page';\nimport { MHidden } from '../components/@material-extend';\nimport { LoginForm } from '../components/authentication/login';\nimport { ref, onValue } from \"firebase/database\";\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  [theme.breakpoints.up('md')]: {\n    display: 'flex'\n  }\n}));\n\nconst ContentStyle = styled('div')(({ theme }) => ({\n  maxWidth: 480,\n  margin: 'auto',\n  display: 'flex',\n  minHeight: '100vh',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function Login() {\n  const navigate = useNavigate();\n  const { loginUser, currentUser, database, setCurrentUsername } = useFirebaseApp();\n  const [loginError, setLoginError] = React.useState(false);\n\n  React.useEffect(() => {\n    if (currentUser !== null) {\n      navigate('/dashboard/app');\n    }\n  }, [currentUser, navigate])\n\n  function saveUser(uid) {\n    onValue(ref(database, 'VerifiedAdmin/Admins/' + uid), (snapshot) => {\n      if (snapshot.exists()) {\n        const data = snapshot.val();\n        setCurrentUsername(data.username);\n      }\n    })\n  }\n\n  function login(email, password) {\n    loginUser(email, password).then(res => {\n      saveUser(res.user.uid);\n      navigate('/dashboard/app');\n    }).catch(err => {\n      setLoginError(true);\n    })\n  }\n\n  return (\n    <RootStyle title=\"Login | Droidcut\">\n      <AuthLayout>\n        Don’t have an account? &nbsp;\n        <Link underline=\"none\" variant=\"subtitle2\" component={RouterLink} to=\"/register\">\n          Get started\n        </Link>\n      </AuthLayout>\n\n      <Container maxWidth=\"sm\">\n        <ContentStyle>\n          <Stack sx={{ mb: 5 }}>\n            <Typography variant=\"h4\" gutterBottom>\n              Sign in Droidcut Admin\n            </Typography>\n            <Typography sx={{ color: 'text.secondary' }}>Enter your credentials below.</Typography>\n          </Stack>\n\n          <LoginForm loginUser={(email, password) => login(email, password)} loginError={loginError} />\n\n          <MHidden width=\"smUp\">\n            <Typography variant=\"body2\" align=\"center\" sx={{ mt: 3 }}>\n              Don’t have an account?&nbsp;\n              <Link variant=\"subtitle2\" component={RouterLink} to=\"/register\">\n                Get started\n              </Link>\n            </Typography>\n          </MHidden>\n        </ContentStyle>\n      </Container>\n    </RootStyle>\n  );\n}\n"],"names":["LoginForm","loginUser","loginError","useState","showPassword","setShowPassword","LoginSchema","Yup","shape","email","required","password","formik","useFormik","initialValues","remember","validationSchema","onSubmit","value","errors","touched","values","isSubmitting","handleSubmit","getFieldProps","autoComplete","noValidate","Stack","spacing","TextField","fullWidth","type","label","error","Boolean","helperText","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","show","edge","icon","eyeFill","eyeOffFill","Typography","variant","color","direction","alignItems","justifyContent","sx","my","FormControlLabel","control","Checkbox","checked","Link","component","RouterLink","to","LoadingButton","size","loading","RootStyle","styled","Page","theme","breakpoints","up","display","ContentStyle","maxWidth","margin","minHeight","flexDirection","padding","Login","navigate","useNavigate","useFirebaseApp","currentUser","database","setCurrentUsername","React","setLoginError","login","then","res","uid","user","onValue","ref","snapshot","exists","data","val","username","catch","err","title","AuthLayout","underline","Container","mb","gutterBottom","width","align","mt"],"sourceRoot":""}